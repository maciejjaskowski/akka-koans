

1. [Super Quick ScalaTest Introduction] Write a test in file MysteriousCalculatorSuite to check what mathematical constant does MysteriousCalculator calculate.
2a. [Akka basics] Do the same for WorkerSuite.
2b. Can you send to the worker a Result() message instead of Work ? What happens then? Find out in the Akka documentation if necessary.

3. [Advanced traits: optional] Worker extends Actor with MysteriousCalculation. 
How would the testability change if Worker extended only MysteriousCalculation?

4. [Akka: actors "receive" method of actor explained in terms of PartialFunction] 
Make changes to PartialFunctionSuite.scala to functions marked "???" so that PartialFunctionSuite pass all tests

5. [Akka: inter actors communication] Make changes to Master so that MasterSuite pass all tests. 
**Note!** If the tests pass isolated but not as a suite then either:
* split this test into two or
* use what's written under "Asynchronous Integration Testing with TestKit on http://doc.akka.io/docs/akka/snapshot/scala/testing.html

6. [Akka: toward workers parallelization] It is cumbersome to pass Worker as parameter to Master. Introduce Worker as a subActor of Master. 
Use context.actorOf() method (see MysteriousApp for an example) 
[optional] How to preserve testability? [traits?] 
7. [Akka] Parallelize the computation using router: Props[Worker].withRouter(RoundRobinRouter(nrOfWorkers)), name = "workerRouter")
8. [Akka] Apply necessary changes so that you can verify how much faster the computation is after the change (if at all ;)

Literature:
* http://weblogs.java.net/blog/manningpubs/archive/2012/09/28/testing-actors-akka
* http://doc.akka.io/docs/akka/snapshot/scala/actors.html
* http://doc.akka.io/docs/akka/snapshot/scala/futures.html
* http://doc.akka.io/docs/akka/snapshot/intro/getting-started.html